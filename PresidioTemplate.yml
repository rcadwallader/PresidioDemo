Parameters:
  VpcId:
    Description: VPC to operate in
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Subnet ID
    Type: AWS::EC2::Subnet::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
#
Resources:
  KmsKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: KMS Symetric Key
      Enabled: true
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
      KeySpec: SYMMETRIC_DEFAULT
      PendingWindowInDays: 7
  SecretManagerSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Secret encrypted with a KMS CMK
      GenerateSecretString:
        SecretStringTemplate: '{"username": "TestUser"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '":;@/\'
      KmsKeyId: !Ref KmsKey
      Name: TestSecret
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      ImageId: ami-0533f2ba8a1995cf9
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: t2.micro
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id TestSecret >> /home/ec2-user/secret.txt
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref EC2Instance
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allows SSH in on port 22 and all traffic out
      GroupName: TestSG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: InstanceProfile
      Path: /
      Roles:
        - !Ref EC2Role
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: GetSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'kms:Decrypt'
                Resource:
                  - !Ref SecretManagerSecret
                  - !GetAtt KmsKey.Arn
